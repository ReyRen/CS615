1. The relatins between sh and bash.
	
	sh (or the Shell Command Language) is a programming language described by the 
	POSIX standard. It has many implementations (ksh88, dash, ...). bash can also be 
	considered an implementation of sh.
	Because sh is a specification, not an implementation, /bin/sh is a symlink (or a 
	hard link) to an actual implementation on most POSIX systems.

	bash started as an sh-compatible implementation (although it predates the POSIX 
	standard by a few years), but as time passed it has acquired many extensions. Many 
	of these extensions may change the behavior of valid POSIX shell scripts, so by 
	itself bash is not a valid POSIX shell. Rather, it is a dialect of the POSIX shell 
	language.
	bash supports a --posix switch, which makes it more POSIX-compliant. It also tries 
	to mimic POSIX if invoked as sh

	For a long time, /bin/sh used to point to /bin/bash on most GNU/Linux systems. As 
	a result, it had almost become safe to ignore the difference between the two. But 
	that started to change recently.

	Some popular examples of systems where /bin/sh does not point to /bin/bash (and on 
	some of which /bin/bash may not even exist) are:

	Modern Debian and Ubuntu systems, which symlink sh to dash by default;
	Busybox, which is usually run during the Linux system boot time as part of 	
	initramfs. It uses the ash shell implementation.
	BSDs. OpenBSD uses pdksh, a descendant of the Korn shell. FreeBSD's sh is a 
	descendant of the original UNIX Bourne shell.

2. What is the Unix Philosophy?

	Basically:
		1. Make each program do one thing well. To do a new job, build afresh 
	rather than complicate old programs by adding new "features".
		2. Expect the output of every program to become the input to another, as 
	yet unknown, program. Don't clutter output with extraneous information. Avoid 	
	stringently columnar or binary input formats. Don't insist on interactive input.
		3. Design and build software, even operating systems, to be tried early, 		4. ideally within weeks. Don't hesitate to throw away the clumsy parts and 
	rebuild them.
		5. Use tools in preference to unskilled help to lighten a programming 	
	task, even if you have to detour to build the tools and expect to throw some of 
	them out after you've finished using them.
